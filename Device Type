/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
 
preferences {
        input(name: "attr1", type: "enum", title: "Activate/deactivate ALL ON/OFF functions", defaultValue: "255", options: ["255","0","1","2"])
        input(name: "attr6", type: "enum", title: "Sending commands to control devices assigned to 1-st association group", options: ["0","1","2"])
        input(name: "attr7", type: "enum", title: "Checking the device status before sending a control frame from key no.2", options: ["0","1"])
        input(name: "attr8", type: "number", title: "Percentage of a dimming step at automatic control", defaultValue: "1", range: "1..99")
        input(name: "attr9", type: "number", title: "Time of manually moving the Dimmer between the extreme dimming values (ms)", defaultValue: "5", range: "1..255")
        input(name: "attr10", type: "number", title: "Time of automatic moving the dimmer between extreme dimming values", defaultValue: "1", range: "0..255")
        input title: "", description: "NOTE: value 0 is required for inductive and capacitive devices unsuitable for dimming (e.g. fluorescent lamps, motors, etc.)", displayDuringSetup: false, type: "paragraph", element: "paragraph"

        input(name: "attr11", type: "number", title: "percentage of a dimming step at manual control", defaultValue: "1", range: "1..99")
        input(name: "attr12", type: "number", title: "Maximum Dimmer level control", defaultValue: "99", range: "2..99")
        input(name: "attr13", type: "number", title: "Minimum Dimmer level control", defaultValue: "2", range: "1..98")
        input(name: "attr14", type: "enum", title: "Switch type", defaultValue: "0", options: ["0","1","2"])
        input(name: "attr15", type: "enum", title: "Double click option (set lighting at 100%)", defaultValue: "1", options: ["0","1"])
        input(name: "attr16", type: "enum", title: "Save Dimmer state after power failure", defaultValue: "1", options: ["0","1"])
        input(name: "attr17", type: "enum", title: "Function of 3-way switch", defaultValue: "0", options: ["0","1"])
        input(name: "attr18", type: "enum", title: "Synchronizing Light level for associated devices", defaultValue: "0", options: ["0","1"])
        input(name: "attr19", type: "enum", title: "Bi-Stable key function", defaultValue: "0", options: ["0","1"])
        input(name: "attr20", type: "number", title: "Impulse Length", defaultValue: "110", range: "100..170")

        
}
metadata {
	definition (name: "Fibaro Dimmer 211 params UK", namespace: "inpier", author: "inpier") {
		capability "Actuator"
		capability "Switch"		
		capability "Polling"
		capability "Refresh"
		capability "Sensor"
		capability "Configuration"
        capability "Switch Level"

		//command "reset"
        
		command "configure"
      fingerprint deviceId: "0x1101", inClusters: "0x72, 0x86, 0x70, 0x85, 0x8E, 0x26, 0x7A, 0x27, 0x73, 0xEF, 0x26, 0x2B"
	
    }

	// simulator metadata
	simulator {
    	status "on":  "command: 2003, payload: FF"
		status "off": "command: 2003, payload: 00"
		status "09%": "command: 2003, payload: 09"
		status "10%": "command: 2003, payload: 0A"
		status "33%": "command: 2003, payload: 21"
		status "66%": "command: 2003, payload: 42"
		status "99%": "command: 2003, payload: 63"
/*
		for (int i = 0; i <= 10000; i += 1000) {
			status "power  ${i} W": new physicalgraph.zwave.Zwave().meterV3.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 4, scale: 2, size: 4).incomingMessage()
		}
		for (int i = 0; i <= 100; i += 10) {
			status "energy  ${i} kWh": new physicalgraph.zwave.Zwave().meterV3.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 0, scale: 0, size: 4).incomingMessage()
		}
        
        ["FF", "00", "09", "0A", "21", "42", "63"].each { val ->
			reply "2001$val,delay 100,2602": "command: 2603, payload: $val"
		}
*/
	}

	// tile definitions
    
	tiles(scale: 2) {
    	multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.switches.switch.on", backgroundColor:"#79b821", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.switches.switch.off", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.switches.switch.on", backgroundColor:"#79b821", nextState:"turningOff"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.switches.switch.off", backgroundColor:"#ffffff", nextState:"turningOn"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
		}
		
		standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "configure", label:'', action:"configure", icon:"st.secondary.configure"
		}
		

		main(["switch"])
		details(["switch","configure"])
	}
}
/*
****************************************************************************************************************
**************                                  INSTRUCTIONS                                      **************
****************************************************************************************************************
**************  Change the Parameter configurationValue[] in the code below to  the value         **************
**************  you want.(Refer to manual for defaults and valid values). Then Save your changes  ************** 
**************  and Publish For Me. Then open SmartThings App and select your device.             ************** 
**************  Click Gear Wheel top right(Android app) & Edit Device then click Done. This triggers  **************
**************  the Update. If you want to confirm  the parameter change then monitor             **************
**************  Live Logging on developers web site and click Configure in the SmarthThings App.  **************
*************   this will give you a report of each of the device's parameters and its current    **************
*************   value and size.                                                                   **************
*************   Once you have changed the parameter you can switch back to your original Device   **************
*************   type if you prefer as the parameter change is retained in the 211 device.         ************** 
*************   I've only listed some parameter below there are others. Just add them if you wish ************** 
*************              Not elegant coding I know but at least it seems to work.               ************** 
*/
def updated() {
	return response([
			delayBetween([
        zwave.configurationV1.configurationSet(configurationValue: [attr1], parameterNumber: 1, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr6], parameterNumber: 6, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr7], parameterNumber: 7, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr8], parameterNumber: 8, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr9], parameterNumber: 9, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr10], parameterNumber: 10, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr11], parameterNumber: 11, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr12], parameterNumber: 12, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr13], parameterNumber: 13, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr14], parameterNumber: 14, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr15], parameterNumber: 15, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr16], parameterNumber: 16, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr17], parameterNumber: 17, size: 1).format(),
		zwave.configurationV1.configurationSet(configurationValue: [attr18], parameterNumber: 18, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr19], parameterNumber: 19, size: 1).format(),
        zwave.configurationV1.configurationSet(configurationValue: [attr20], parameterNumber: 20, size: 1).format()
], 1000)
		])
}
//****************************************************************************************************************
//****************************************************************************************************************
//****************************************************************************************************************
//****************************************************************************************************************



def parse(String description) {
	//log.trace(description)
	def result = null
    
    if (description != "updated") {
		def cmd = zwave.parse(description, [0x72: 1, 0x86: 1, 0x70: 1, 0x85: 1, 0x8E: 1, 0x26: 1, 0x7A: 1, 0x27: 1, 0x73: 1, 0xEF: 1, 0x26: 1, 0x2B: 1])
		if (cmd) {
			result = zwaveEvent(cmd)
		}
    }
    //log.debug "Parsed '${description}' to ${result.inspect()}"
	return result
}


def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	log.trace(cmd)
	dimmerEvents(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	log.trace(cmd)
	dimmerEvents(cmd)
}
def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd) {
log.trace(cmd)
	dimmerEvents(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd)
{
	log.trace(cmd)
	dimmerEvents(cmd)
}

def dimmerEvents(physicalgraph.zwave.Command cmd) {
	log.trace(cmd)
	def result = []
	def value = (cmd.value ? "on" : "off")
	def switchEvent = createEvent(name: "switch", value: value, descriptionText: "$device.displayName was turned $value")
	result << switchEvent
	if (cmd.value) {
		result << createEvent(name: "level", value: cmd.value, unit: "%")
	}
	if (switchEvent.isStateChange) {
		result << response(["delay 3000", zwave.meterV2.meterGet(scale: 2).format()])
	}
	return result
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.trace(cmd)
	log.debug "No handler for $cmd"
	// Handles all Z-Wave commands we aren't interested in
	createEvent(descriptionText: cmd.toString(), isStateChange: false)
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv1.ConfigurationReport cmd) {
	def result = []
	log.debug "${device.displayName} parameter '${cmd.parameterNumber}' with a byte size of '${cmd.size}' is set to '${cmd.configurationValue}'"
	result
}


def createEvent(physicalgraph.zwave.Command cmd,  Map map) {
	// Handles any Z-Wave commands we aren't interested in
	log.debug "UNHANDLED COMMAND $cmd"
}

def on() {
	log.info "on"
	delayBetween([zwave.basicV1.basicSet(value: 0xFF).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}

def off() {
	log.info "off"
    delayBetween ([zwave.basicV1.basicSet(value: 0x00).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}
/*
def poll() {
	zwave.switchBinaryV1.switchBinaryGet().format()
}

def refresh() {
	delayBetween([
		zwave.switchBinaryV1.switchBinaryGet().format(),
		zwave.manufacturerSpecificV1.manufacturerSpecificGet().format()
	])
}


def reset() {
	log.trace("reset")
	return secureSequence([
    	zwave.switchMultilevelV1.switchMultilevelGet(),
		
	])
}
*/
def setLevel(value) {
	def valueaux = value as Integer
	def level = Math.min(valueaux, 99)
	delayBetween ([zwave.basicV1.basicSet(value: level).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}


def listCurrentParams() {
	log.debug "Listing of current parameter settings of ${device.displayName}"
    def cmds = []
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 1).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 6).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 7).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 8).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 9).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 10).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 11).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 12).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 13).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 14).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 15).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 16).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 17).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 18).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 19).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 20).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 30).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 39).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 40).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 41).format()
	delayBetween(cmds, 700)
}

def configure() {
	log.debug "Reading Device Parameters  of ${device.displayName}..."
    listCurrentParams();
}
